######################################################################
# Automatically generated by qmake (3.0) Tue Jun 13 12:19:18 2017
######################################################################

TARGET = jpeg
include(../../3rdParty.pri)

message("~~~ libjpeg.a LIBRARY $${BUILD} ~~~")

# Input
HEADERS +=  jerror.h jmorecfg.h jpeglib.h cderror.h \
            cdjpeg.h jdct.h jinclude.h jmemsys.h \
            jpegint.h jversion.h transupp.h

SOURCES +=  jaricom.c jcapimin.c jcapistd.c jcarith.c \
            jccoefct.c jccolor.c jcdctmgr.c jchuff.c \
            jcinit.c jcmainct.c jcmarker.c jcmaster.c \
            jcomapi.c jcparam.c jcprepct.c jcsample.c \
            jctrans.c jdapimin.c jdapistd.c jdarith.c \
            jdatadst.c jdatasrc.c jdcoefct.c jdcolor.c \
            jddctmgr.c jdhuff.c jdinput.c jdmainct.c \
            jdmarker.c jdmaster.c jdmerge.c jdpostct.c \
            jdsample.c jdtrans.c jerror.c jfdctflt.c \
            jfdctfst.c jfdctint.c jidctflt.c jidctfst.c \
            jidctint.c jquant1.c jquant2.c jutils.c jmemmgr.c

# memory manager
SOURCES += jmemnobs.c

#   Selecting a memory manager
# --------------------------

# The IJG code is capable of working on images that are too big to fit in main
# memory; data is swapped out to temporary files as necessary.  However, the
# code to do this is rather system-dependent.  We provide five different
# memory managers:

# * jmemansi.c  This version uses the ANSI-standard library routine tmpfile(),
#     which not all non-ANSI systems have.  On some systems
#     tmpfile() may put the temporary file in a non-optimal
#     location; if you don't like what it does, use jmemname.c.

# * jmemname.c  This version creates named temporary files.  For anything
#     except a Unix machine, you'll need to configure the
#     select_file_name() routine appropriately; see the comments
#     near the head of jmemname.c.  If you use this version, define
#     NEED_SIGNAL_CATCHER in jconfig.h to make sure the temp files
#     are removed if the program is aborted.

# * jmemnobs.c  (That stands for No Backing Store :-).)  This will compile on
#     almost any system, but it assumes you have enough main memory
#     or virtual memory to hold the biggest images you work with.

# * jmemdos.c This should be used with most 16-bit MS-DOS compilers.
#     See the system-specific notes about MS-DOS for more info.
#     IMPORTANT: if you use this, define USE_MSDOS_MEMMGR in
#     jconfig.h, and include the assembly file jmemdosa.asm in the
#     programs.  The supplied makefiles and jconfig files for
#     16-bit MS-DOS compilers already do both.

# * jmemmac.c Custom version for Apple Macintosh; see the system-specific
#     notes for Macintosh for more info.

# If you have plenty of (real or virtual) main memory, just use jmemnobs.c.
# "Plenty" means about ten bytes for every pixel in the largest images
# you plan to process, so a lot of systems don't meet this criterion.
# If yours doesn't, try jmemansi.c first.  If that doesn't compile, you'll have
# to use jmemname.c; be sure to adjust select_file_name() for local conditions.
# You may also need to change unlink() to remove() in close_backing_store().

# Except with jmemnobs.c or jmemmac.c, you need to adjust the DEFAULT_MAX_MEM
# setting to a reasonable value for your system (either by adding a #define for
# DEFAULT_MAX_MEM to jconfig.h, or by adding a -D switch to the Makefile).
# This value limits the amount of data space the program will attempt to
# allocate.  Code and static data space isn't counted, so the actual memory
# needs for cjpeg or djpeg are typically 100 to 150Kb more than the max-memory
# setting.  Larger max-memory settings reduce the amount of I/O needed to
# process a large image, but too large a value can result in "insufficient
# memory" failures.  On most Unix machines (and other systems with virtual
# memory), just set DEFAULT_MAX_MEM to several million and forget it.  At the
# other end of the spectrum, for MS-DOS machines you probably can't go much
# above 300K to 400K.  (On MS-DOS the value refers to conventional memory only.
# Extended/expanded memory is handled separately by jmemdos.c.)
