#! /bin/bash

# Create a read-only disk image of the contents of a folder
# Trevor SANDY
# Last Update November 22 2020

set -e

function pure_version() {
  echo '1.0.0.4'
}

function version() {
  echo "create-dmg $(pure_version)"
}

function usage() {
  version
  echo "Creates a fancy DMG file."
  echo "Usage:  $(basename $0) options... image.dmg source_folder"
  echo "All contents of source_folder will be copied into the disk image."
  echo "Options:"
  echo "  --volname name"
  echo "      set volume name (displayed in the Finder sidebar and window title)"
  echo "  --volicon icon.icns"
  echo "      set volume icon"
  echo "  --dmgicon pic.png"
  echo "      set dmg file icon (create dmg icon from png file)"
  echo "  --background pic.png"
  echo "      set folder background image (provide png, gif, jpg)"
  echo "  --window-pos x y"
  echo "      set position the folder window"
  echo "  --window-size width height"
  echo "      set size of the folder window"
  echo "  --text-size text_size"
  echo "      set window text size (10-16)"
  echo "  --icon-size icon_size"
  echo "      set window icons size (up to 128)"
  echo "  --icon file_name x y"
  echo "      set position of the file's icon"
  echo "  --hide-extension file_name"
  echo "      hide the extension of file"
  echo "  --custom-icon file_name custom_icon_or_sample_file x y"
  echo "      set position and custom icon"
  echo "  --app-drop-link x y"
  echo "      make a drop link to Applications, at location x,y"
  echo "  --eula eula_file"
  echo "      attach a license file to the dmg"
  echo "  --no-internet-enable"
  echo "      disable automatic mount&copy"
  echo "  --version         show tool version number"
  echo "  -h, --help        display this help"
  exit 0
}

WINX=10
WINY=60
WINW=500
WINH=350
ICON_SIZE=128
TEXT_SIZE=16

while test "${1:0:1}" = "-"; do
  case $1 in
    --volname)
      VOLUME_NAME="$2"
      echo "    __VOLUME_NAME.....................: ${VOLUME_NAME}"
      shift; shift;;
    --volicon)
      VOLUME_ICON_FILE="$2"
      echo "    __VOLUME_ICON_FILE................: ${VOLUME_ICON_FILE}"
      shift; shift;;
    --dmgicon)
      DMG_ICON_FILE="$2"
      echo "    __DMG_ICON_FILE...................: ${DMG_ICON_FILE}"
      shift; shift;;
    --background)
      BACKGROUND_FILE="$2"
      BACKGROUND_FILE_NAME="$(basename $BACKGROUND_FILE)"
      BACKGROUND_CLAUSE="set background picture of opts to file \".background:$BACKGROUND_FILE_NAME\""
      REPOSITION_HIDDEN_FILES_CLAUSE="set position of every item to {theBottomRightX + 100, 100}"
      echo "    __BACKGROUND_FILE.................: ${BACKGROUND_FILE}"
      echo "    __BACKGROUND_FILE_NAME............: ${BACKGROUND_FILE_NAME}"
      echo "    __BACKGROUND_CLAUSE...............: ${BACKGROUND_CLAUSE}"
      echo "    __REPOSITION_HIDDEN_FILES_CLAUSE..: ${REPOSITION_HIDDEN_FILES_CLAUSE}"
      shift; shift;;
    --icon-size)
      ICON_SIZE="$2"
      echo "    __ICON_SIZE.......................: ${ICON_SIZE}"
      shift; shift;;
    --text-size)
      TEXT_SIZE="$2"
      echo "    __TEXT_SIZE.......................: ${TEXT_SIZE}"
      shift; shift;;
    --window-pos)
      WINX=$2; WINY=$3
      echo "    __WINDOW_POSITION WINX, WINY......: ${WINX}, ${WINY}"
      shift; shift; shift;;
    --window-size)
      WINW=$2; WINH=$3
      echo "    __WINDOW_SIZE WINW, WINH..........: ${WINW}, ${WINH}"
      shift; shift; shift;;
    --icon)
      ICON_POSITION_CLAUSE="${ICON_POSITION_CLAUSE}set position of item \"$2\" to {$3, $4}"
      echo "    __ICON_POSITION_CLAUSE............: ${ICON_POSITION_CLAUSE}"
      shift; shift; shift; shift;;
    --hide-extension)
      HIDING_CLAUSE="${HIDING_CLAUSE}set the extension hidden of item \"$2\" to true"
      echo "    __HIDE_EXTENSION HIDING_CLAUSE....: ${HIDING_CLAUSE}"
      shift; shift;;
    --custom-icon)
      ICON_CUSTOM_NAME="$2"
      ICON_CUSTOM_FILE="$3"
      ICON_CUSTOM_POSITION_CLAUSE="${ICON_CUSTOM_POSITION_CLAUSE}set position of item \"$2\" to {$4, $5}"
      echo "    __ICON_CUSTOM_NAME................: ${ICON_CUSTOM_NAME}"
      echo "    __ICON_CUSTOM_FILE................: ${ICON_CUSTOM_FILE}"
      echo "    __ICON_CUSTOM_POSITION_CLAUSE.....: ${ICON_CUSTOM_POSITION_CLAUSE}"
      shift; shift; shift; shift; shift;;
    -h | --help)
      usage;;
    --version)
      version; exit 0;;
    --pure-version)
      pure_version; exit 0;;
    --app-drop-link)
      APPLICATION_LINK=$2
      APPLICATION_CLAUSE="set position of item \"Applications\" to {$2, $3}"
      echo "    __APPLICATION_LINK X, Y...........: ${APPLICATION_LINK}, $3"
      echo "    __APPLICATION_CLAUSE..............: ${APPLICATION_CLAUSE}"
      shift; shift; shift;;
    --eula)
      EULA_RSRC=$2
      echo "    __EULA_RSRC.......................: ${EULA_RSRC}"
      shift; shift;;
    --no-internet-enable)
      NOINTERNET=1
      shift;;
    -*)
      echo "Unknown option $1. Run with --help for help."
      exit 1;;
  esac
done

test -z "$2" && {
  echo "Not enough arguments. Invoke with --help for help."
  exit 1
}

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
DMG_PATH="$1"
DMG_DIRNAME="$(dirname "$DMG_PATH")"
DMG_DIR="$(cd "$DMG_DIRNAME" > /dev/null; pwd)"
DMG_NAME="$(basename "$DMG_PATH")"
DMG_TEMP_NAME="$DMG_DIR/rw.${DMG_NAME}"
SRC_FOLDER="$(cd "$2" > /dev/null; pwd)"
test -z "$VOLUME_NAME" && VOLUME_NAME="$(basename "$DMG_PATH" .dmg)"

AUX_PATH="$SCRIPT_DIR/dmg-utils"

test -d "$AUX_PATH" || {
  echo "Cannot find dmg-utils directory: $AUX_PATH"
  exit 1
}

echo "    __SCRIPT_DIR......................: ${SCRIPT_DIR}"
echo "    __DMG_PATH........................: ${DMG_PATH}"
echo "    __DMG_DIRNAME.....................: ${DMG_DIRNAME}"
echo "    __DMG_DIR.........................: ${DMG_DIR}"
echo "    __DMG_NAME........................: ${DMG_NAME}"
echo "    __DMG_TEMP_NAME...................: ${DMG_TEMP_NAME}"
echo "    __SRC_FOLDER......................: ${SRC_FOLDER}"
echo "    __AUX_PATH........................: ${AUX_PATH}"

# Create the image - Note: On Travis, VMs running macOS 10.13 use file system HFS+, VMs running macOS 10.14 and newer use APFS.
echo "Creating disk image..."
test -f "${DMG_TEMP_NAME}" && rm -f "${DMG_TEMP_NAME}"
ACTUAL_SIZE=`du -sm "$SRC_FOLDER" | sed -e 's/[[:space:]].*//g'`
DISK_IMAGE_SIZE=$(expr $ACTUAL_SIZE + 20)
hdiutil create -srcfolder "$SRC_FOLDER" -volname "${VOLUME_NAME}" -fs APFS -fsargs "-c c=64,a=16,e=16" -format UDRW -size ${DISK_IMAGE_SIZE}m "${DMG_TEMP_NAME}"

# mount it
echo "Mounting disk image..."
MOUNT_DIR="/Volumes/${VOLUME_NAME}"

# try unmount dmg if it was mounted previously (e.g. developer mounted dmg, installed app and forgot to unmount it)
echo "Unmounting disk image..."
DEV_NAME=$(hdiutil info | egrep --color=never '^/dev/' | sed 1q | awk '{print $1}')
test -d "${MOUNT_DIR}" && hdiutil detach "${DEV_NAME}"

echo "Mount directory: $MOUNT_DIR"
DEV_NAME=$(hdiutil attach -readwrite -noverify -noautoopen "${DMG_TEMP_NAME}" | egrep --color=never '^/dev/' | sed 1q | awk '{print $1}')
echo "Device name:     $DEV_NAME"

if test -f "$BACKGROUND_FILE"; then
  echo "Copying background file '$BACKGROUND_FILE'..."
  test -d "$MOUNT_DIR/.background" || mkdir "$MOUNT_DIR/.background"
  cp "$BACKGROUND_FILE" "$MOUNT_DIR/.background/$BACKGROUND_FILE_NAME"
fi

if test -f "$ICON_CUSTOM_FILE"; then
  echo "Copying file '$ICON_CUSTOM_NAME'..."
  cp "$ICON_CUSTOM_FILE" "$MOUNT_DIR/$ICON_CUSTOM_NAME"
fi

if ! test -z "$APPLICATION_LINK"; then
  echo "Making link to Applications dir: $MOUNT_DIR"
  ln -s /Applications "$MOUNT_DIR/Applications"
fi

if test -f "$VOLUME_ICON_FILE" && ! test "$VOLUME_ICON_FILE" = ".Volume.icns"; then
  echo "Copying volume icon file '$VOLUME_ICON_FILE'..."
  cp "$VOLUME_ICON_FILE" "$MOUNT_DIR/.VolumeIcon.icns"
  SetFile -c icnC "$MOUNT_DIR/.VolumeIcon.icns"
fi

# run applescript
APPLESCRIPT=$(mktemp -t createdmg)
cat "$AUX_PATH/template.applescript" | sed -e "s/WINX/$WINX/g" -e "s/WINY/$WINY/g" -e "s/WINW/$WINW/g" -e "s/WINH/$WINH/g" -e "s/BACKGROUND_CLAUSE/$BACKGROUND_CLAUSE/g" -e "s/REPOSITION_HIDDEN_FILES_CLAUSE/$REPOSITION_HIDDEN_FILES_CLAUSE/g" -e "s/ICON_SIZE/$ICON_SIZE/g" -e "s/TEXT_SIZE/$TEXT_SIZE/g" | perl -pe  "s/ICON_POSITION_CLAUSE/$ICON_POSITION_CLAUSE/g" | perl -pe  "s/ICON_CUSTOM_POSITION_CLAUSE/$ICON_CUSTOM_POSITION_CLAUSE/g" | perl -pe "s/APPLICATION_CLAUSE/$APPLICATION_CLAUSE/g" | perl -pe "s/HIDING_CLAUSE/$HIDING_CLAUSE/" >"$APPLESCRIPT"
## for debugging - uncomment to enable
## cp -f "${APPLESCRIPT}" "${DMG_DIR}/$(basename ${APPLESCRIPT}).applescript"
echo "Running Applescript: /usr/bin/osascript \"${APPLESCRIPT}\" \"${VOLUME_NAME}\""
("/usr/bin/osascript" "${APPLESCRIPT}" "${VOLUME_NAME}" && exit 0)
if [[ "$?" -ne 0 ]]; then
  echo "Failed running AppleScript ${APPLESCRIPT}"
  exit 64
fi
echo "Done running the applescript..."
sleep 4

echo "Cleanup applescript..."
rm "$APPLESCRIPT"

# make sure it's not world writeable
echo "Fixing permissions..."
chmod -Rf go-w "${MOUNT_DIR}" &> /dev/null || true
echo "Done fixing permissions."

# make the top window open itself on mount:
echo "Blessing started..."
bless --folder "${MOUNT_DIR}" --openfolder "${MOUNT_DIR}"
echo "Blessing finished"

if ! test -z "$VOLUME_ICON_FILE"; then
   # tell the volume that it has a special file attribute
   SetFile -a C "$MOUNT_DIR"
fi

# unmount
echo "Unmounting disk image..."
hdiutil detach "${DEV_NAME}"

# compress image
echo "Compressing disk image..."
hdiutil convert "${DMG_TEMP_NAME}" -format UDZO -imagekey zlib-level=9 -o "${DMG_DIR}/${DMG_NAME}"
rm -f "${DMG_TEMP_NAME}"

# set the dmg file icon
if ! test -z "$DMG_ICON_FILE"; then
  echo "adding dmg file icon from ${DMG_ICON_FILE}..."
  chmod +x "${AUX_PATH}/dmg-fileicon"
  "${AUX_PATH}/dmg-fileicon" set "${DMG_DIR}/${DMG_NAME}" "${DMG_ICON_FILE}"
fi

# checking for Rez.
REZ_PATH=$(xcrun --find Rez)
if [ -n $REZ_PATH ]; then
  # adding EULA resources
  if [ ! -z "${EULA_RSRC}" -a "${EULA_RSRC}" != "-null-" ]; then
    echo "adding EULA resources..."
    "${AUX_PATH}/dmg-license.py" --rez "${REZ_PATH}" "${DMG_DIR}/${DMG_NAME}" "${EULA_RSRC}"
  fi
else
  echo "Warning - could not find 'Rez' developer tool - EULA was not set."
fi

if [ ! -z "${NOINTERNET}" -a "${NOINTERNET}" == 1 ]; then
  echo "not setting 'internet-enable' on the dmg"
else
  hdiutil internet-enable -yes "${DMG_DIR}/${DMG_NAME}"
fi

echo "Disk image done:"
exit 0
