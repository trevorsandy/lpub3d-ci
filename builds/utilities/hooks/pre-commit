#!/bin/bash
#
# This commit-msg hook updates the LPub3D version information when
# [build pkg*] or [deploy pkg*] is detected in the commit message.
#
#  Trevor SANDY <trevor.sandy@gmail.com>
#  Last Update: Jun 03, 2022
#  Copyright (C) 2017 - 2022 by Trevor SANDY
#
## Automatically generate git revision info
##
## Setup
## '>' denotes a new line
## cd to your git repository and type:
## $ cat << pbEOF >.git/hooks/pre-commit
## > #!/bin/sh
## > # Confirm master branch and set location of pre-commit script in your source repository
## > [ "$(git rev-parse --abbrev-ref HEAD)" = "master" ] && ./builds/utilities/hooks/pre-commit || true
## > pbEOF
## $
##
## Ignore Increment:
##   In instances where you do NOT want the version info incremented,
##   add the environment variable inc_rev=no to your git call.
##   e.g. $ env inc_rev=no git commit -m "Message - 00 [ci skip].
##   This is useful on the first commit after you change the
##   major/minor/patch version number for example.
#
# Environment Vars:
##  - inc_rev: increment revision [Default=no]
##  - inc_cnt: increment commit count [Default=yes]
##  - force:   force setting OBS config file configuration [Default=no]
#
# Flags:
##  -f: force setting OBS config file configuration
##
## Manual execution examples:
#   Update config files to latest commit
#   $ ./builds/utilities/hooks/pre-commit -f
#
#   Update config files to last commit and commit changes
#   $ env force=yes git commit -m "Commit message"
#
#   Update config files to last commit but do not increment revision
#   $ env inc_rev=no force=yes ./builds/utilities/hooks/pre-commit
#
#   Update config files to last commit, do not increment revision and commit changes
#   $ env force=yes inc_rev=no inc_cnt=yes git commit -m "Commit message"
##

FILES_PATTERN='\.dropbox_oauth|\.github_api*|\.sfdeploy_travis*'
FORBIDDEN='secrets'
git diff --cached --name-only | \
    egrep "$FILES_PATTERN" && \
    ehco && echo " -Commit rejected - found $FORBIDDEN. Remove and try again" && echo && exit 1 || true

exec 1>&2
# to disable or run from command line, set default to 'no'
increment_revision=${inc_rev:-no}
increment_commitcount=${inc_cnt:-yes}
force_config=${force:-no}
update_config_files=no

# trigger if 'env force=yes' or '-f' flag specified
[ ! "$force_config" = "no" ] && update_config_files=yes || :
[ "$1" = "-f" ] && update_config_files=yes || :

if test x"$update_config_files" != x"no"; then
  tag_long=`git describe --tags --match v* --long`
  tag_short=`git describe --tags --match v* --abbrev=0`
  commit_count=`git rev-list HEAD --count`
  sha_hash_short=`git rev-parse --short HEAD`

  tmp1=${tag_long#*-}                                     # remove everything before and including "-"
  revision=${tmp1%-*}                                     # remove everything after and including "-"
  tmp1=${tag_short//./" "}                                # replace . with " "
  version_=${tmp1/v/}                                     # replace v with ""
  tmp1=${version_#*_}                                     # remove everything before and including "_" if exist
  if test "$tmp1" != "$version_"; then suffix=${tmp1}; fi # check if ver_tmp not same as version_ - suffix exist
  if test -n "$suffix"; then version_=${version_%_*}; fi  # remove everything after and including "_" - suffix exist
  read major minor patch <<< ${version_}

  echo "0. Incrementing Git version info..."
  echo "   Old revision............$revision"
  echo "   Old commit count........$commit_count"
  echo "   Increment revision......$increment_revision"
  echo "   Increment commit count..$increment_commitcount"

  if test x"$increment_revision" = x"yes"; then ((revision++)); fi
  if test x"$increment_commitcount" = x"yes"; then ((commit_count++)); fi

  echo "   New revision............$revision"
  echo "   New commit count........$commit_count"

  working_dir=$PWD/mainApp; export OBS=true
  chmod +x builds/utilities/update-config-files.sh
  ./builds/utilities/update-config-files.sh ${working_dir} $major $minor $patch $revision $commit_count $sha_hash_short $suffix

  git add builds/utilities/version.info
  git add mainApp/docs/lpub3d${major}${minor}.1
  git add mainApp/docs/README.txt
  git add mainApp/docs/RELEASE_NOTES.html
  git add mainApp/lpub3d.desktop
  git add mainApp/lpub3d.appdata.xml
  git add README.md
  git add gitversion.pri

  git add builds/linux/obs/alldeps/PKGBUILD
  git add builds/linux/obs/alldeps/lpub3d-ci.spec
  git add builds/linux/obs/alldeps/debian/changelog
  git add builds/linux/obs/alldeps/debian/lpub3d-ci.dsc
  git add builds/linux/obs/debian/rules
  
  echo "   Staged files:"
  for file in $(git diff --name-only --cached); do 
    echo "   -$file"
  done
fi
