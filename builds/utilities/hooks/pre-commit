#!/bin/bash
#
# This commit-msg hook updates the LPub3D version information when
# [build pkg*] or [deploy pkg*] is detected in the commit message.
#
#  Trevor SANDY <trevor.sandy@gmail.com>
#  Last Update: November 23, 2022
#  Copyright (C) 2017 - 2024 by Trevor SANDY
#
#  Automatically generate git revision info
#
#  Setup
#  '>' denotes a new line
#  cd to your git repository and type:
#  $ cat << pbEOF >.git/hooks/pre-commit
#  > #!/bin/sh
#  > # Confirm master branch and set location of pre-commit script in your source repository
#  > [ "$(git rev-parse --abbrev-ref HEAD)" = "master" ] && ./builds/utilities/hooks/pre-commit || true
#  > pbEOF
#  $
#
#  Ignore Increment:
#    In instances where you do NOT want the version info incremented,
#    add the environment variable inc_rev=no to your git call.
#    e.g. $ env inc_rev=no git commit -m "Message - 00 [ci skip].
#    This is useful on the first commit after you change the
#    major/minor/patch version number for example.
#
# Environment Vars:
#   - inc_rev:   increment revision [Default=yes]
#   - inc_cnt:   increment commit count [Default=yes]
#   - force:     update obs alldeps configuration files [Default=<unset>]
#   - force_all: update all obs configuration files [Default=<unset>]
#
# Flags:
#   -a: update all obs configration files
#   -f: update obs alldeps configuration files
#   -o: update obs configuration files
#   -r: do not increment revision
#   -c: do not increment commit count
#
#  Manual execution examples:
#   Update ALLDEPS configuration files to latest commit
#   $ ./builds/utilities/hooks/pre-commit -f
#
#   Update ALLDEPS configuration files to latest commit and do not increment revision
#   $ ./builds/utilities/hooks/pre-commit -rf
#
#   Update ALLDEPS configuration files to latest commit and do not increment revision or commit count
#   $ ./builds/utilities/hooks/pre-commit -rfc
#
#   Update ALLDEPS configuration files to last commit and do not increment revision
#   $ env force=yes inc_rev=no ./builds/utilities/hooks/pre-commit
#
#   Update ALLDEPS configuration files to last commit, increment revision and commit count and commit changes
#   $ env force=yes git commit -m "Commit message"
#
#   Update ALLDEPS configuration files to latest commit and do not increment revision or commit count; commit changes
#   $ env force=yes inc_rev=no inc_cnt=no git commit -m "Commit message"
#
#   Update OBS configuration files to latest commit
#   $ ./builds/utilities/hooks/pre-commit -o
#
#   Update OBS configuration files to latest commit and do not increment revision
#   $ ./builds/utilities/hooks/pre-commit -ro
#
#   Update OBS configuration files to latest commit and do not increment revision or commit count
#   $ ./builds/utilities/hooks/pre-commit -roc
#
#   Update OBS configuration files to last commit and do not increment revision
#   $ env force=no inc_rev=no ./builds/utilities/hooks/pre-commit
#
#   Update OBS configuration files to last commit, increment revision and commit count and commit changes
#   $ env force=no git commit -m "Commit message"
#
#   Update OBS configuration files to latest commit and do not increment revision or commit count; commit changes
#   $ env force=no inc_rev=no inc_cnt=no git commit -m "Commit message"
#

FILES_PATTERN='\.dropbox_oauth|\.github_api*|\.sfdeploy_travis*'
FORBIDDEN='secrets'
git diff --cached --name-only | \
    egrep "$FILES_PATTERN" && \
    ehco && echo " -Commit rejected - found $FORBIDDEN. Remove and try again" && echo && exit 1 || true

exec 1>&2

# defaults
update_all_files=${force_all:-}
update_alldeps_files=${force:-}
increment_revision=${inc_rev:-yes}
increment_commitcount=${inc_cnt:-yes}

#check for optional config flags
while getopts ":rcof" opt; do
  case $opt in
  r)
    increment_revision=no
  ;;
  c)
    increment_commitcount=no
  ;;
  o)
    update_alldeps_files=no
  ;;
  a)
    update_all_files=yes
  ;;
  f)
    update_alldeps_files=yes
  ;;
  \?)
    echo "Invalid option: -$OPTARG" >&2
    exit 1
  ;;
  esac
done

if test x"$update_alldeps_files" = x"yes" || test x"$update_all_files" = x"yes"; then
  export OBS=true
  config_dir=builds/linux/obs/alldeps
elif test x"$update_alldeps_files" = x"no" && test x"$update_all_files" = x""; then
  config_dir=builds/linux/obs
else
  exit 0
fi

tag_long=`git describe --tags --match v* --long`
tag_short=`git describe --tags --match v* --abbrev=0`
commit_count=`git rev-list HEAD --count`
sha_hash_short=`git rev-parse --short HEAD`

tmp1=${tag_long#*-}                                     # remove everything before and including "-"
revision=${tmp1%-*}                                     # remove everything after and including "-"
tmp1=${tag_short//./" "}                                # replace . with " "
version_=${tmp1/v/}                                     # replace v with ""
tmp1=${version_#*_}                                     # remove everything before and including "_" if exist
if test "$tmp1" != "$version_"; then suffix=${tmp1}; fi # check if ver_tmp not same as version_ - suffix exist
if test -n "$suffix"; then version_=${version_%_*}; fi  # remove everything after and including "_" - suffix exist
read major minor patch <<< ${version_}

echo "0. Incrementing Git version info..."
echo "   Old revision............$revision"
echo "   Old commit count........$commit_count"
echo "   Increment revision......$increment_revision"
echo "   Increment commit count..$increment_commitcount"

if test x"$increment_revision" = x"yes"; then ((revision++)); fi
if test x"$increment_commitcount" = x"yes"; then ((commit_count++)); fi

echo "   New revision............$revision"
echo "   New commit count........$commit_count"

working_dir=$PWD/mainApp
chmod +x builds/utilities/update-config-files.sh
./builds/utilities/update-config-files.sh ${working_dir} $major $minor $patch $revision $commit_count $sha_hash_short $suffix
if test x"$update_all_files" = x"yes"; then
  export OBS=false
  ./builds/utilities/update-config-files.sh ${working_dir} $major $minor $patch $revision $commit_count $sha_hash_short $suffix
fi

git add builds/utilities/version.info
git add mainApp/docs/lpub3d${major}${minor}.1
git add mainApp/docs/README.txt
git add mainApp/docs/RELEASE_NOTES.html
git add mainApp/lpub3d.desktop
git add mainApp/lpub3d.appdata.xml
git add mainApp/extras/LPub3D_Npp_UDL.xml
git add README.md
git add gitversion.pri

git add ${config_dir}/PKGBUILD
git add ${config_dir}/lpub3d-ci.spec
git add ${config_dir}/debian/changelog
git add ${config_dir}/debian/lpub3d-ci.dsc
git add builds/linux/obs/debian/rules
if test x"$update_all_files" = x"yes"; then
  git add builds/linux/obs/PKGBUILD
  git add builds/linux/obs/lpub3d-ci.spec
  git add builds/linux/obs/debian/changelog
  git add builds/linux/obs/debian/lpub3d-ci.dsc
fi

echo "   Staged files:"
for file in $(git diff --name-only --cached); do
  echo "   -$file"
done

