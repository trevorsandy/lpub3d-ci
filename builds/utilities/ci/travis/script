#!/bin/bash
#
# Travis build [script] procedures
#
# Trevor SANDY <trevor.sandy@gmail.com>
# Last Update June 07, 2021
# Copyright (c) 2017 - 2021 by Trevor SANDY
#
cd $LP3D_BUILD_FOLDER

# Build distributions package (using docker-compose and AppImage for linux builds) or just compile the code
if [ -z "$LP3D_DEPLOY_PACKAGES" ]; then
  # build packages
  if [[ "$LP3D_BUILD_PKG" = "yes" && -z "$LP3D_COMPILE_SOURCE" ]]; then
    # build linux Docker packages
    if [[ "$TRAVIS_OS_NAME" = "linux" && "$LP3D_BUILD_OS" != "appimage" ]]; then
      # setup distribution directory link to 3rd_party_directory
      if [ ! -d "${LP3D_COMPOSE_DIR}/${LP3D_3RD_DIST_DIR}" ]; then
        ln -sf "$LP3D_DIST_DIR_PATH" "${LP3D_COMPOSE_DIR}/${LP3D_3RD_DIST_DIR}" && \
        if [ -d "${LP3D_COMPOSE_DIR}/${LP3D_3RD_DIST_DIR}" ]; then
          echo "$LP3D_DIST_DIR_PATH linked to ${LP3D_COMPOSE_DIR}/${LP3D_3RD_DIST_DIR}"
        fi
      else
        echo "Using cached 3rd Party repository ${LP3D_COMPOSE_DIR}/${LP3D_3RD_DIST_DIR}";
      fi;
      # Docker builds
      if [ -n "$LP3D_BUILD_OS" ]; then
        echo "Login to Docker Hub and set credentials for Compose..."
        echo $DOCKER_HUB_TOKEN | docker login --username trevorsandy --password-stdin
        docker-compose -f $LP3D_COMPOSE_DIR/docker-compose-cibuild-linux.yml run --rm $LP3D_BUILD_OS;
      fi;
      echo "Package Files: " && find $LP3D_COMPOSE_DIR -type f -not -name "*ocker*";
    fi;
    # build macOS packages
    if [ "$LP3D_BUILD_OS" = "macos" ]; then
      # setup distribution directory link to 3rd_party_directory
      if [ ! -d "${DmgBuildPath}/${LP3D_3RD_DIST_DIR}" ]; then
        ln -sf "$LP3D_DIST_DIR_PATH" "${DmgBuildPath}/${LP3D_3RD_DIST_DIR}" && \
        if [ -d "${DmgBuildPath}/${LP3D_3RD_DIST_DIR}" ]; then
          echo "$LP3D_DIST_DIR_PATH linked to ${DmgBuildPath}/${LP3D_3RD_DIST_DIR}"
        fi
      else
        echo "Using cached 3rd Party repository ${DmgBuildPath}/${LP3D_3RD_DIST_DIR}";
      fi;
      chmod +x builds/macx/CreateDmg.sh && ./builds/macx/CreateDmg.sh;
      echo "Package Files:" && find $DmgBuildPath/DMGS -type f;
    fi;
  fi
  # Compile source code or build AppImage
  if [[ ("$LP3D_COMPILE_SOURCE" = "true" && -z "$LP3D_BUILD_PKG") || \
        ("$TRAVIS_OS_NAME" = "linux" && "$LP3D_BUILD_PKG" = "yes" && "$LP3D_BUILD_OS" = "appimage") ]]; then
    # Linux
    if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      export TARGET_CPU=$(uname -m); export PLATFORM_CODE="ubu" ; export PLATFORM_VER=$(lsb_release -sr)
      export LPUB3D=${PWD##*/}; export WD=$(cd ../ && echo $PWD); export LDRAWDIR=${HOME}/ldraw;
      # setup distribution directory link to 3rd_party_directory
      if [ ! -d "${WD}/${LP3D_3RD_DIST_DIR}" ]; then
        ln -sf "$LP3D_DIST_DIR_PATH" "${WD}/${LP3D_3RD_DIST_DIR}" && \
        if test -d "${WD}/${LP3D_3RD_DIST_DIR}"; then echo "$LP3D_DIST_DIR_PATH linked to ${WD}/${LP3D_3RD_DIST_DIR}"; fi;
      else
        echo "Using cached 3rd Party repository ${WD}/${LP3D_3RD_DIST_DIR}";
      fi;
      if [ -n "$LP3D_BUILD_RENDERERS" ]; then
            echo "Building Renderers for Linux";
      fi

      if [[ "$LP3D_BUILD_OS" = "appimage" && "$TRAVIS_CPU_ARCH" = "arm64" ]]; then
          export NO_DEPS="true"
      fi

      chmod a+x builds/utilities/CreateRenderers.sh && ./builds/utilities/CreateRenderers.sh;
      #echo "Renderer Files:" && find ${LP3D_DIST_DIR_PATH} -type f && echo;

      # build AppImage
      if [[ "$LP3D_BUILD_PKG" = "yes" && "$LP3D_BUILD_OS" = "appimage" ]]; then
        qmake -v;
        qmake -makefile -nocache QMAKE_STRIP=: CONFIG+=release CONFIG-=debug_and_release CONFIG+=api;
        if [[ "$TRAVIS_CPU_ARCH" = "arm64" ]]; then
            make
        else
            make -j$(nproc)
        fi
        make INSTALL_ROOT=$AppImageBuildPath install;

        if [ "$LP3D_PRE_APPIMAGE_BUILD_CHECK_VAR" = "true" ]; then
            echo "'Pre-AppImage LPub3D build check' detected from environment variable."
            export SOURCE_DIR=${PWD}
            export LP3D_CHECK_LDD="1"
            export LP3D_CHECK_STATUS="--version --app-paths"
            export LPUB3D_EXE="${AppImageBuildPath}/usr/bin/lpub3d${LP3D_VER_MAJOR}${LP3D_VER_MINOR}"
            chmod a+x builds/check/build_checks.sh && ./builds/check/build_checks.sh
        fi

        echo && echo "Setup linuxdeployqt..."
        if [ ! -e linuxdeployqt ]; then
            if [ "$TRAVIS_CPU_ARCH" = "amd64" ]; then
                echo "Insalling linuxdeployqt for amd64 arch..."
                wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage" -O linuxdeployqt
            elif [ "$TRAVIS_CPU_ARCH" = "arm64" ]; then
                echo "Building linuxdeployqt for arm64 arch..."
                export PATH="${AppImageBuildPath}/bin":"$PATH"
                git clone https://github.com/probonopd/linuxdeployqt.git linuxdeployqt-build
                ( cd linuxdeployqt-build && qmake && make && cp -a ./bin/* ../ ) 
                if [ -f linuxdeployqt ]; then
                  echo "linuxdeployqt copied to ${AppImageBuildPath}"
                else
                  echo "ERROR - linuxdeployqt not found."
                fi
                echo "Building patchelf..."
                wget https://nixos.org/releases/patchelf/patchelf-0.9/patchelf-0.9.tar.bz2
                tar xf patchelf-0.9.tar.bz2
                ( cd patchelf-0.9/ && ./configure && make && sudo make install )
                echo "Installing appimagetool..."
                sudo wget -c -nv "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-aarch64.AppImage" -O /usr/local/bin/appimagetool
                sudo chmod a+x /usr/local/bin/appimagetool
                convertApp="$(which lconvert)"
                if [ -n "$convertApp" ]; then
                    ( mkdir bin && cd bin && ln -sf $convertApp lconvert ) && \
                    echo "bin/lconvert linked to $convertApp"
                fi
            fi
            chmod a+x linuxdeployqt
            echo "Setup linuxdeployqt completed" && echo
        fi
        renderers=$(find $AppImageBuildPath/opt -type f);
        for r in $renderers; do executables="$executables -executable=$r"; done;
        unset QTDIR; unset QT_PLUGIN_PATH ; unset LD_LIBRARY_PATH;
        export VERSION="$LP3D_VERSION"    # linuxdeployqt uses this for naming the file
        ./linuxdeployqt $AppImageBuildPath/usr/share/applications/*.desktop $executables -bundle-non-qt-libs -verbose=2 > CreateAppImage.log 2>&1;
        ./linuxdeployqt $AppImageBuildPath/usr/share/applications/*.desktop -appimage -verbose=2 >> CreateAppImage.log 2>&1;
        echo && echo "AppImage Dynamic Library Dependencies:" && \
        find $AppImageBuildPath -executable -type f -exec ldd {} \; | grep " => /usr" | cut -d " " -f 2-3 | sort | uniq && echo;
        AppImageFile=$(ls LPub3D*.AppImage)
        if [ -f ${AppImageFile} ]; then
            if [ "$TRAVIS_CPU_ARCH" = "arm64" ]; then
                echo "Applying magic bytes '\x00\x00\x00' correction..."
                sed -i 's|AI\x02|\x00\x00\x00|' ${AppImageFile} && \
                echo "Magic bytes correction applied to ${AppImageFile}." || \
                echo "Failed to apply magic bytes correction"
            fi
            echo "AppImage build completed successfully.";
            AppImageExtension=${AppImageFile##*-};
            mkdir -p $AppImageBuildPath/AppImage;
            mv -f ${AppImageFile} "${AppImageBuildPath}/AppImage/LPub3D-${LP3D_APP_VERSION_LONG}-${AppImageExtension}";
            echo "    Download package..: LPub3D-${LP3D_APP_VERSION_LONG}-${AppImageExtension}";
        else
            echo "AppImage build failed. $AppImageFile not found.";
        fi
      # else if not build renderers then just compile source
      elif [ -z "$LP3D_BUILD_RENDERERS" ]; then
          qmake -makefile -nocache QMAKE_STRIP=: CONFIG+=release CONFIG+=build_check CONFIG-=debug_and_release CONFIG+=deb;
          if [[ "$TRAVIS_CPU_ARCH" = "arm64" ]]; then
              make
          else
              make -j$(nproc)
          fi
      fi
    # macOS compile source code
    elif [ "$TRAVIS_OS_NAME" = "osx" ]; then
        if [ ! -d "${DmgBuildPath}/${LP3D_3RD_DIST_DIR}" ]; then
            ln -sf "$LP3D_DIST_DIR_PATH" "${DmgBuildPath}/${LP3D_3RD_DIST_DIR}" && \
            if test -d "${DmgBuildPath}/${LP3D_3RD_DIST_DIR}"; then echo "$LP3D_DIST_DIR_PATH linked to ${DmgBuildPath}/${LP3D_3RD_DIST_DIR}"; fi;
        else
            echo "Using cached 3rd Party repository ${DmgBuildPath}/${LP3D_3RD_DIST_DIR}";
        fi;
        if [ -z "$LP3D_BUILD_RENDERERS" ]; then
           export BUILD_OPT="compile";
        else
           export BUILD_OPT="renderers";
           echo "Building Renderers for macOS";
        fi
        chmod +x builds/macx/CreateDmg.sh && ./builds/macx/CreateDmg.sh;
    fi;
  fi
fi
