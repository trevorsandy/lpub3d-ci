#!/bin/bash
#
# Travis build [after_script] procedures
#
# Trevor SANDY <trevor.sandy@gmail.com>
# Last Update June 07, 2021
# Copyright (C) 2017 - 2024 by Trevor SANDY
#
cd $LP3D_BUILD_FOLDER

IFS='/' read -ra SLUG_PARTS <<< "$TRAVIS_REPO_SLUG"; unset IFS;
LPUB3D=${SLUG_PARTS[1]}

# Compile source only build checks (package checks are in Create shell scripts)...
if [[  "$LP3D_COMPILE_SOURCE" = "true" && -z "$LP3D_BUILD_PKG" ]]; then
  if [ "$TRAVIS_OS_NAME" = "osx" ]; then
     echo "- build check LPub3D macOS..."
     SOURCE_DIR=${LP3D_BUILD_FOLDER}/../dmgbuild/${LPUB3D}
     source ${SOURCE_DIR}/builds/check/build_checks.sh
  elif [ "$TRAVIS_OS_NAME" = "linux" ]; then
     echo "- build check LPub3D Linux..."
     SOURCE_DIR=${LP3D_BUILD_FOLDER}
  fi
  # TODO figure out why Linux check is locking up on Travis-CI
  #source ${SOURCE_DIR}/builds/check/build_checks.sh
fi

if [[ "$LP3D_BUILD_PKG" = "yes" && "$LP3D_BUILD_OS" = "appimage" ]]; then
  echo "- build check LPub3D.AppImage bundle..."
  file_DPkg=$(find $AppImageBuildPath/AppImage -name LPub3D-${LP3D_APP_VERSION_LONG}*.AppImage -type f);
  SOURCE_DIR=${LP3D_BUILD_FOLDER}
  # make check directory and copy AppImage
  if [ -n "$file_DPkg" ]; then
    mkdir appImage_Check && cp -f $file_DPkg appImage_Check/
    LPUB3D_EXE=$(find appImage_Check -name *.AppImage -type f)
    if [ -f ${LPUB3D_EXE} ];then
      echo "- AppImage copied to ${PWD}/${LPUB3D_EXE}."
    else
      echo "ERROR - AppImage not copied to ${PWD}/appImage_Check/."
    fi
    LP3D_CHECK_STATUS="--version --app-paths"
    source ${SOURCE_DIR}/builds/check/build_checks.sh
  else
    echo "ERROR - AppImage was not found in $AppImageBuildPath/AppImage."
  fi
fi

cd $LP3D_BUILD_FOLDER

# Gather up and move build artefacts and logs to releases directory
if [[ "$LP3D_BUILD_PKG" = "yes" && -z "$LP3D_COMPILE_SOURCE" && -z "$LP3D_BUILD_STORAGE" && -z "$LP3D_DEPLOY_PACKAGES" ]]; then
  if [[ "$TRAVIS_OS_NAME" = "linux" && "$LP3D_BUILD_OS" != "appimage" ]]; then
    echo "Docker-generated Assets:" && find $LP3D_COMPOSE_DIR -type f -not -name "*ocker*";
    echo "Copying LPub3D-${LP3D_APP_VERSION_LONG}*.${LP3D_ASSET_EXT} from $LP3D_COMPOSE_DIR..."
    file_DPkg=$(find $LP3D_COMPOSE_DIR -name LPub3D-${LP3D_APP_VERSION_LONG}*.${LP3D_ASSET_EXT} -type f);
    file_Logs=$(find $LP3D_COMPOSE_DIR -name *.log -type f);
  fi;
  if [ "$LP3D_BUILD_OS" = "macos" ]; then
    echo "Copying LPub3D-${LP3D_APP_VERSION_LONG}*.${LP3D_ASSET_EXT} from $DmgBuildPath/DMGS..."
    file_DPkg=$(find $DmgBuildPath/DMGS -name LPub3D-${LP3D_APP_VERSION_LONG}*.${LP3D_ASSET_EXT} -type f);
    file_Logs=$(find $DmgBuildPath/${LPUB3D} -name CreateDmg.sh.log -type f);
    [ -n "$file_Logs" ] && cp -f $file_Logs $LP3D_LOGS_DIR || echo "ERROR - Logs folder empty, nothing copied";
    file_Logs=$(find $DmgBuildPath -name CreateRenderers.sh*.log -type f);
  fi;
  if [ "$LP3D_BUILD_OS" = "appimage" ]; then
    echo "Copying LPub3D-${LP3D_APP_VERSION_LONG}*.${LP3D_ASSET_EXT} from $AppImageBuildPath/AppImage..."
    file_DPkg=$(find $AppImageBuildPath/AppImage -name LPub3D-${LP3D_APP_VERSION_LONG}*.${LP3D_ASSET_EXT} -type f);
    file_Logs=$(find ${LP3D_BUILD_FOLDER} -name CreateAppImage.log -type f);
    [ -n "$file_Logs" ] && cp -f $file_Logs $LP3D_LOGS_DIR || echo "ERROR - Logs folder empty, nothing copied";
    file_Logs=$(find ${LP3D_3RD_BUILD_FOLDER} -name CreateRenderers.sh*.log -type f);
  fi;
  [ -n "$file_Logs" ] && cp -f $file_Logs $LP3D_LOGS_DIR || echo "ERROR - Logs folder empty, nothing copied";
  [ -n "$file_DPkg" ] && cp -f $file_DPkg $LP3D_DOWNLOAD_ASSETS || echo "ERROR - Download assets folder empty, nothing copied";

  # Create hash file
  cd $LP3D_DOWNLOAD_ASSETS
  file_DPkg=$(find ./ -name LPub3D-${LP3D_APP_VERSION_LONG}*.${LP3D_ASSET_EXT} -type f);
  echo "Creating hash file for $file_DPkg..."
  [ -n "$file_DPkg" ] && sha512sum "${file_DPkg}" > "${file_DPkg}.sha512" || echo "ERROR - Failed to create hash file ${file_DPkg}.sha512"
  cd $LP3D_BUILD_FOLDER

  # Set release or build Dropbox storage path
  if [ "$LP3D_DEPLOY_PKG" = "yes" ]; then
    echo "Travis-CI Release Assets:" && find $LP3D_RELEASES_DIR -type f;
    LP3D_DROPBOX_DIR="$LP3D_DROPBOX_RELEASES_DIR";
  else
    echo "Travis-CI Build Assets:" && find $LP3D_RELEASES_DIR -type f;
    LP3D_DROPBOX_DIR="$LP3D_DROPBOX_BUILDS_DIR";
  fi;

  # Upload assets to Dropbox storage
  if [ -f "/tmp/.dropbox_oauth" ]; then
    chmod +x "${LP3D_CI_DIR}/dropbox_uploader.sh";
    ./"${LP3D_CI_DIR}/dropbox_uploader.sh" mkdir "$LP3D_DROPBOX_DIR";
    ./"${LP3D_CI_DIR}/dropbox_uploader.sh" upload "$LP3D_LOGS_DIR" "$LP3D_DROPBOX_DIR"/;
    ./"${LP3D_CI_DIR}/dropbox_uploader.sh" upload "$LP3D_DOWNLOAD_ASSETS" "$LP3D_DROPBOX_DIR"/;
    ./"${LP3D_CI_DIR}/dropbox_uploader.sh" list "$LP3D_DROPBOX_DIR";
  else
    echo "ERROR - /tmp/.dropbox_oauth token file not found - cannot perform upload";
  fi;

  # Upload continuous build assets to GitHub at each build when not deploying
  if [ "$LP3D_DEPLOY_PKG" != "yes" ]; then
    export GREP_PATH=grep;
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then export GREP_PATH=ggrep; fi
    curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/${TRAVIS_REPO_SLUG}/commits/master -o repo.txt;
    export REMOTE=$($GREP_PATH -Po '(?<=: \")(([a-z0-9])\w+)(?=\")' -m 1 repo.txt);
    export LOCAL=$(git rev-parse HEAD);
    if [[ "$REMOTE" != "$LOCAL" ]]; then
       if [ -z "$REMOTE" ]; then
          echo "ERROR - could not retrieve remote commit hash-object. Aborting upload."
       else
          echo "ERROR - Build no longer current. $REMOTE vs $LOCAL. Aborting upload."
       fi
       exit 0;
    fi;
    # use alternate revision of upload.sh - in case the latest 'master' is broken
    if [ -n "$LP3D_UPLOADTOOL_REV_VAR" ]; then
       echo "Using alternate revision of upload.sh - commit: ${LP3D_UPLOADTOOL_REV_VAR}."
       LP3D_UPLOADTOOL_REV=${LP3D_UPLOADTOOL_REV_VAR}
    fi
    wget -c https://raw.githubusercontent.com/probonopd/uploadtool/${LP3D_UPLOADTOOL_REV}/upload.sh
    # Update  Release Title in upload.sh
    upload_script_file="$LP3D_BUILD_FOLDER/upload.sh"
    if [ -f ${upload_script_file} -a -r ${upload_script_file} ]; then
      if [ "${LPUB3D}" != "lpub3d" ]; then
        if [ "${LPUB3D}" = "lpub3dnext" ]; then
          LP3D_RELEASE_LABEL="Continuous Next Build ${LP3D_VER_BUILD} (r${LP3D_VER_REVISION})"
        else
          LP3D_RELEASE_LABEL="Continuous DevOps Build ${LP3D_VER_BUILD} (r${LP3D_VER_REVISION})"
        fi
      else
        LP3D_RELEASE_LABEL="Continuous Build ${LP3D_VER_BUILD} (r${LP3D_VER_REVISION})"
      fi
      if [ "$LP3D_BUILD_OS" = "macos" ]; then
        sed -i "" "s/    RELEASE_TITLE=\"Continuous build\"/    RELEASE_TITLE=\"${LP3D_RELEASE_LABEL}\"/" "${upload_script_file}"
      else
        sed -i "s/    RELEASE_TITLE=\"Continuous build\"/    RELEASE_TITLE=\"${LP3D_RELEASE_LABEL}\"/" "${upload_script_file}"
      fi;
    else
      echo  "   Error: could not update release title ${upload_script_file}"
    fi;
    # Perform GitHub upload
    file_DPkg=$(find $LP3D_DOWNLOAD_ASSETS/ -name LPub3D-${LP3D_APP_VERSION_LONG}*.${LP3D_ASSET_EXT} -type f);
    [ -f "${file_DPkg}" ] && bash upload.sh "${file_DPkg}" || echo "ERROR - ${file_DPkg} GitHub upload failed."
    [ -f "${file_DPkg}.sha512" ] && bash upload.sh "${file_DPkg}.sha512"  || echo "ERROR - ${file_DPkg}.sha512 GitHub upload failed."
  fi;
  
  # Upload Sourceforge.net build assets at each build for continuous and official deploy
  if [ "$LP3D_DEPLOY_PACKAGES" != "true" ]; then
    source ${LP3D_CI_SCRIPT_DIR}/releases
  fi
fi
